name: Ultra-Fast CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'
  YARN_CACHE_FOLDER: ~/.yarn-cache

jobs:
  # Ultra-fast parallel execution - everything runs simultaneously
  parallel-checks:
    name: Parallel Quality & Build Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        job: [lint, type-check, build, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    # Linting job
    - name: Run linting
      if: matrix.job == 'lint'
      run: yarn lint
      
    # Type checking job  
    - name: Run type checking
      if: matrix.job == 'type-check'
      run: yarn type-check
      
    # Build job
    - name: Build application
      if: matrix.job == 'build'
      run: yarn build
      
    # Security audit job
    - name: Run security audit
      if: matrix.job == 'security'
      run: |
        yarn audit --level moderate || echo "Security audit completed with findings"
        # Non-blocking security check
        if yarn audit --level moderate --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
          echo "‚ö†Ô∏è Security vulnerabilities found. Please review and update dependencies."
          yarn audit --level moderate
        else
          echo "‚úÖ No security vulnerabilities found."
        fi
      continue-on-error: true

  # Fast feedback job - runs immediately for quick feedback
  quick-feedback:
    name: Quick Feedback
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    - name: Quick lint check
      run: yarn lint --max-warnings 0
      
    - name: Quick type check
      run: yarn type-check --noEmit --skipLibCheck

  # Performance analysis - only for main branch
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: parallel-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    - name: Build for analysis
      run: yarn build
      
    - name: Bundle size analysis
      run: |
        echo "üìä Bundle Analysis:"
        echo "Total size: $(du -sh dist/ | cut -f1)"
        echo "Number of files: $(find dist/ -type f | wc -l)"
        echo "Largest files:"
        find dist/ -type f -exec du -h {} + | sort -rh | head -10
        
        # Check for performance issues
        BUNDLE_SIZE_MB=$(du -sm dist/ | cut -f1)
        if [ "$BUNDLE_SIZE_MB" -gt 50 ]; then
          echo "‚ö†Ô∏è Warning: Bundle size is large ($BUNDLE_SIZE_MB MB)"
        else
          echo "‚úÖ Bundle size is acceptable ($BUNDLE_SIZE_MB MB)"
        fi
        
        # Check for source maps in production
        if find dist/ -name "*.map" | grep -q .; then
          echo "‚ö†Ô∏è Source maps found in production build"
        else
          echo "‚úÖ No source maps in production build"
        fi

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: parallel-checks
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    - name: Build application
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        retention-days: 30
        
    - name: Health check
      run: |
        # Start server in background
        npm install -g http-server
        http-server dist -p 8080 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 3
        
        # Check if server is running
        if curl -f http://localhost:8080 > /dev/null 2>&1; then
          echo "‚úÖ Build is serving correctly"
          kill $SERVER_PID
        else
          echo "‚ùå Build failed to serve"
          kill $SERVER_PID
          exit 1
        fi