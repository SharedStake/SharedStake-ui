name: Ultra-Fast CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'

jobs:
  # Install dependencies once and cache them
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Install dependencies
      id: cache
      run: |
        if yarn install --frozen-lockfile --prefer-offline --silent; then
          echo "cache-hit=true" >> $GITHUB_OUTPUT
        else
          echo "cache-hit=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-modules-

  # Ultra-fast parallel execution with shared dependencies
  fast-checks:
    name: Fast Quality & Build Checks
    runs-on: ubuntu-latest
    needs: setup
    
    strategy:
      matrix:
        job: [lint, type-check, build, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-modules-
          
    - name: Install dependencies (if cache miss)
      if: needs.setup.outputs.cache-hit == 'false'
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    # Linting job
    - name: Run linting
      if: matrix.job == 'lint'
      run: yarn lint
      
    # Type checking job  
    - name: Run type checking
      if: matrix.job == 'type-check'
      run: yarn type-check
      
    # Build job
    - name: Build application
      if: matrix.job == 'build'
      run: yarn build
      
    # Security audit job (non-blocking)
    - name: Run security audit
      if: matrix.job == 'security'
      run: |
        yarn audit --level moderate || echo "Security audit completed with findings"
        if yarn audit --level moderate --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
          echo "Security vulnerabilities found. Please review and update dependencies."
          yarn audit --level moderate
        else
          echo "No security vulnerabilities found."
        fi
      continue-on-error: true

  # Ultra-fast PR feedback (no build, just quality checks)
  pr-feedback:
    name: PR Quick Feedback
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-modules-
          
    - name: Install dependencies (if cache miss)
      if: needs.setup.outputs.cache-hit == 'false'
      run: yarn install --frozen-lockfile --prefer-offline --silent
        
    - name: Quick lint check
      run: yarn lint --max-warnings 0
      
    - name: Quick type check
      run: yarn type-check --noEmit --skipLibCheck

  # Smart deployment check (only if build job succeeded)
  deployment-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [setup, fast-checks]
    if: github.ref == 'refs/heads/main' && needs.fast-checks.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'yarn.lock'
        
    - name: Restore node_modules cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node-modules-
          
    - name: Install dependencies (if cache miss)
      if: needs.setup.outputs.cache-hit == 'false'
      run: yarn install --frozen-lockfile --prefer-offline --silent
      
    - name: Build application
      run: yarn build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        retention-days: 30
        
    - name: Health check
      run: |
        npm install -g http-server
        http-server dist -p 8080 &
        SERVER_PID=$!
        sleep 2
        
        if curl -f http://localhost:8080 > /dev/null 2>&1; then
          echo "Build is ready for deployment"
          kill $SERVER_PID
        else
          echo "Build failed deployment check"
          kill $SERVER_PID
          exit 1
        fi