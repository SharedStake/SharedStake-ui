version: 1
frontend:
  phases:
    preBuild:
      commands:
        # Ultra-fast setup with aggressive optimizations
        - echo "‚ö° Lightning Amplify Build Starting..."
        - echo "Branch: $AWS_BRANCH | Commit: $AWS_COMMIT_ID"
        
        # Use Node.js 22 LTS with optimizations
        - nvm install 22
        - nvm use 22
        
        # Install yarn with version pinning and optimizations
        - npm install -g yarn@1.22.22 --silent
        
        # Clear cache issues and optimize
        - yarn cache clean --silent || true
        
        # Ultra-fast dependency installation
        - yarn install --frozen-lockfile --prefer-offline --silent --network-concurrency 1 --network-timeout 100000
        
        # Verify installation quickly
        - yarn --version
        - node --version
        
        # Pre-build optimizations
        - |
          if [ ! -f "package.json" ] || [ ! -f "yarn.lock" ]; then
            echo "‚ùå Critical files missing"
            exit 1
          fi
        
        # Check for critical dependencies
        - |
          if ! yarn list --pattern "vue" --silent > /dev/null 2>&1; then
            echo "‚ùå Vue.js not found"
            exit 1
          fi
        
    build:
      commands:
        # Lightning-fast build with conditional logic
        - |
          if [ "$AWS_BRANCH" = "main" ]; then
            echo "üèóÔ∏è Production build for main branch"
            BUILD_MODE="production"
            RUN_FULL_CHECKS="true"
          elif [ "$AWS_BRANCH" = "develop" ]; then
            echo "üß™ Development build for develop branch"
            BUILD_MODE="development"
            RUN_FULL_CHECKS="true"
          else
            echo "üîß Feature build for branch: $AWS_BRANCH"
            BUILD_MODE="development"
            RUN_FULL_CHECKS="false"
          fi
        
        # Conditional quality checks based on branch
        - |
          if [ "$RUN_FULL_CHECKS" = "true" ]; then
            echo "üîç Running full quality checks..."
            yarn lint --cache --cache-location .eslintcache
            yarn type-check --noEmit --skipLibCheck
          else
            echo "‚ö° Running fast quality checks..."
            yarn lint --max-warnings 0
          fi
        
        # Ultra-fast build with optimizations
        - echo "üèóÔ∏è Building application in $BUILD_MODE mode..."
        - |
          if [ "$BUILD_MODE" = "production" ]; then
            yarn build --mode production
          else
            yarn build --skip-plugins @vue/cli-plugin-eslint
          fi
        
        # Quick build validation
        - echo "‚úÖ Build completed successfully"
        - ls -la dist/
        
        # Essential build checks
        - |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build validation failed"
            exit 1
          fi
        
        # Quick size check
        - BUILD_SIZE=$(du -sh dist/ | cut -f1)
        - echo "üì¶ Build size: $BUILD_SIZE"
        
    postBuild:
      commands:
        # Lightning-fast post-build analysis
        - echo "üìä Lightning Build Summary:"
        - echo "Branch: $AWS_BRANCH"
        - echo "Commit: $AWS_COMMIT_ID"
        - echo "Build size: $(du -sh dist/ | cut -f1)"
        - echo "Files: $(find dist/ -type f | wc -l)"
        - echo "Timestamp: $(date)"
        
        # Essential health checks
        - test -f dist/index.html && echo "‚úÖ index.html found" || (echo "‚ùå index.html missing" && exit 1)
        - test -f dist/robots.txt && echo "‚úÖ robots.txt found" || echo "‚ö†Ô∏è robots.txt missing"
        - test -f dist/sitemap.xml && echo "‚úÖ sitemap.xml found" || echo "‚ö†Ô∏è sitemap.xml missing"
        
        # Quick performance check
        - |
          BUILD_SIZE_MB=$(du -sm dist/ | cut -f1)
          if [ "$BUILD_SIZE_MB" -gt 50 ]; then
            echo "‚ö†Ô∏è Bundle size is large ($BUILD_SIZE_MB MB)"
          else
            echo "‚úÖ Bundle size is acceptable ($BUILD_SIZE_MB MB)"
          fi
        
        # Final success message
        - echo "‚ö° Lightning Amplify build completed successfully!"

  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
    
  cache:
    paths:
      - node_modules/**/*
      - ~/.yarn-cache/**/*
      - ~/.npm/**/*
      - .eslintcache
      
  environment:
    variables:
      # Ultra-optimized build performance
      NODE_OPTIONS: '--max-old-space-size=4096 --max-semi-space-size=128'
      
      # Skip source maps for maximum speed
      GENERATE_SOURCEMAP: 'false'
      
      # Optimize webpack builds
      NODE_ENV: 'production'
      
      # Enable all build optimizations
      VUE_CLI_SKIP_ESLINT: 'false'
      VUE_CLI_MODERN_MODE: 'true'
      VUE_CLI_CSS_EXTRACT: 'true'
      
      # Memory and performance optimizations
      UV_THREADPOOL_SIZE: '16'
      NODE_OPTIONS: '--max-old-space-size=4096'
      
      # Yarn optimizations
      YARN_CACHE_FOLDER: '~/.yarn-cache'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      YARN_NETWORK_CONCURRENCY: '1'
      YARN_NETWORK_TIMEOUT: '100000'
      
      # Build optimizations
      VUE_CLI_SKIP_ESLINT: 'false'
      VUE_CLI_MODERN_MODE: 'true'
      VUE_CLI_CSS_EXTRACT: 'true'
      
      # ESLint optimizations
      ESLINT_CACHE: 'true'
      ESLINT_CACHE_LOCATION: '.eslintcache'