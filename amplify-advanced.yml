version: 1
frontend:
  phases:
    preBuild:
      commands:
        # Environment setup
        - echo "üöÄ Starting Amplify build process..."
        - echo "Branch: $AWS_BRANCH"
        - echo "Commit: $AWS_COMMIT_ID"
        
        # Use Node.js 22 LTS (matches CI and package.json engines)
        - nvm install 22
        - nvm use 22
        
        # Install yarn globally with version pinning
        - npm install -g yarn@1.22.22
        
        # Clear any existing cache issues
        - yarn cache clean
        
        # Install dependencies with optimizations
        - yarn install --frozen-lockfile --prefer-offline --network-timeout 100000
        
        # Verify installation
        - yarn --version
        - node --version
        
        # Pre-build validation
        - |
          if [ ! -f "package.json" ]; then
            echo "‚ùå package.json not found"
            exit 1
          fi
        
        - |
          if [ ! -f "yarn.lock" ]; then
            echo "‚ùå yarn.lock not found"
            exit 1
          fi
        
        # Check for critical dependencies
        - |
          if ! yarn list --pattern "vue" > /dev/null 2>&1; then
            echo "‚ùå Vue.js not found in dependencies"
            exit 1
          fi
        
    build:
      commands:
        # Conditional build based on branch
        - |
          if [ "$AWS_BRANCH" = "main" ]; then
            echo "üèóÔ∏è Production build for main branch"
            BUILD_MODE="production"
          elif [ "$AWS_BRANCH" = "develop" ]; then
            echo "üß™ Development build for develop branch"
            BUILD_MODE="development"
          else
            echo "üîß Feature build for branch: $AWS_BRANCH"
            BUILD_MODE="development"
          fi
        
        # Run linting first (fail fast on code quality issues)
        - echo "üîç Running linting checks..."
        - yarn lint
        
        # Run type checking (catch TypeScript errors early)
        - echo "üîß Running type checking..."
        - yarn type-check
        
        # Build the application with optimizations
        - echo "üèóÔ∏è Building application in $BUILD_MODE mode..."
        - |
          if [ "$BUILD_MODE" = "production" ]; then
            yarn build
          else
            yarn build
          fi
        
        # Verify build output
        - echo "‚úÖ Build completed successfully"
        - ls -la dist/
        
        # Build validation
        - |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build directory not created"
            exit 1
          fi
        
        - |
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå index.html not found in build output"
            exit 1
          fi
        
        # Check build size
        - BUILD_SIZE=$(du -sh dist/ | cut -f1)
        - echo "üì¶ Build size: $BUILD_SIZE"
        
        # Warn if build is too large
        - |
          BUILD_SIZE_MB=$(du -sm dist/ | cut -f1)
          if [ "$BUILD_SIZE_MB" -gt 50 ]; then
            echo "‚ö†Ô∏è Warning: Build size is large ($BUILD_SIZE_MB MB)"
          fi
        
    postBuild:
      commands:
        # Generate comprehensive build report
        - echo "üìä Build Summary:"
        - echo "Branch: $AWS_BRANCH"
        - echo "Commit: $AWS_COMMIT_ID"
        - echo "Build size: $(du -sh dist/ | cut -f1)"
        - echo "Number of files: $(find dist/ -type f | wc -l)"
        - echo "Build timestamp: $(date)"
        
        # Health check - ensure critical files exist
        - test -f dist/index.html && echo "‚úÖ index.html found" || (echo "‚ùå index.html missing" && exit 1)
        - test -f dist/robots.txt && echo "‚úÖ robots.txt found" || echo "‚ö†Ô∏è robots.txt missing"
        - test -f dist/sitemap.xml && echo "‚úÖ sitemap.xml found" || echo "‚ö†Ô∏è sitemap.xml missing"
        
        # Check for common build issues
        - |
          if find dist/ -name "*.map" | grep -q .; then
            echo "‚ö†Ô∏è Source maps found in production build"
          fi
        
        # Optional: Run basic accessibility check if pa11y is available
        - |
          if command -v pa11y >/dev/null 2>&1; then
            echo "üîç Running accessibility check..."
            pa11y http://localhost:8080 --reporter cli || echo "‚ö†Ô∏è Accessibility check failed (non-blocking)"
          else
            echo "‚ÑπÔ∏è Accessibility check skipped (pa11y not installed)"
          fi || true
        
        # Final success message
        - echo "üéâ Amplify build completed successfully!"

  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
    
  cache:
    paths:
      - node_modules/**/*
      - ~/.yarn-cache/**/*
      - ~/.npm/**/*
      
  environment:
    variables:
      # Optimize build performance
      NODE_OPTIONS: '--max-old-space-size=4096'
      
      # Skip source maps for faster builds in production
      GENERATE_SOURCEMAP: 'false'
      
      # Optimize webpack builds
      NODE_ENV: 'production'
      
      # Enable build optimizations
      VUE_CLI_SKIP_ESLINT: 'false'  # Keep ESLint for quality
      
      # Memory optimization for large builds
      UV_THREADPOOL_SIZE: '16'
      
      # Yarn optimizations
      YARN_CACHE_FOLDER: '~/.yarn-cache'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      
      # Build optimizations
      VUE_CLI_MODERN_MODE: 'true'
      VUE_CLI_CSS_EXTRACT: 'true'